version: "3.9"

services:
  conapp:
    depends_on:
      pgdb:
        condition: service_healthy
    build:
      context: .
    container_name: ${SERVER_CONTAINER_NAME}
    hostname: ${SERVER_CONTAINER_NAME}
    networks:
      - gopoc-network
    ports:
      - "${SERVER_HOST_PORT}:${SERVER_CONTAINER_PORT}"
    environment:
      - DB_USER=${DB_USER}  
      - DB_PASSWORD=${DB_PASSWORD} 
      - DB_CONTAINER_NAME=${DB_CONTAINER_NAME}  
      - DB_CONTAINER_PORT=${DB_CONTAINER_PORT} 
      - DB_NAME=${DB_NAME}  
      - APITYPE=${APITYPE}
      - SERVER_HOST_PORT=${SERVER_HOST_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_SECURITY_PROTOCOL=${KAFKA_SECURITY_PROTOCOL}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_TOPIC_PARTITION_COUNT=${KAFKA_TOPIC_PARTITION_COUNT}
      - KAFKA_TOPIC_REPLICA_COUNT=${KAFKA_TOPIC_REPLICA_COUNT}
      - KAFKA_LINGER_MS=${KAFKA_LINGER_MS}
      - KAFKA_BATCH_SIZE=${KAFKA_BATCH_SIZE}
      - NEW_CONNECTOR_TOPIC=${NEW_CONNECTOR_TOPIC}

  pgdb:
    container_name: ${DB_CONTAINER_NAME}
    hostname: ${DB_CONTAINER_NAME}
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_HOST_PORT}:${DB_CONTAINER_PORT}"
    volumes:
     - condb-pg-vol:/var/lib/postgresql/data
    networks:
      - gopoc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  condb-pg-vol:

networks:
  gopoc-network:
    name: gopoc-network
    driver: bridge