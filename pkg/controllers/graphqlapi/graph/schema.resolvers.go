package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"log"

	"github.com/kartpop/connector-api/pkg/controllers/graphqlapi/graph/model"
	"github.com/kartpop/connector-api/pkg/models"
)

// CreateConnector is the resolver for the createConnector field.
func (r *mutationResolver) CreateConnector(ctx context.Context, input model.NewConnector) (*model.Connector, error) {
	var connector model.Connector
	connector.LocationID = input.LocationID
	connector.ChargeSpeed = input.ChargeSpeed
	connector.Type = input.Type
	connector.Active = input.Active

	lconnector := convertToDBConnector(connector)
	err := r.ConnectorLogic.AddConnector(&lconnector)
	if err != nil {
		log.Fatalln(err.Error())
	}

	connector.ID = lconnector.Id
	return &connector, nil
}

// Connectors is the resolver for the connectors field.
func (r *queryResolver) Connectors(ctx context.Context) ([]*model.Connector, error) {
	pagedConnectors, err := r.ConnectorLogic.GetConnectors(models.ConnectorQueryParams{})
	if err != nil {
		log.Fatalln(err.Error())
	}

	var connectors []*model.Connector
	for i := 0; i < len(*pagedConnectors.Connectors); i++ {
		con := (*pagedConnectors.Connectors)[i]
		convertedcon := convertToGraphConnector(*con)
		connectors = append(connectors, &convertedcon)
	}

	return connectors, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
